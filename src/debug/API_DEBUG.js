// API_DEBUG.js - Th√™m file n√†y v√†o project c·ªßa b·∫°n
// H√†m n√†y gi√∫p ki·ªÉm tra API tr∆∞·ªõc khi d√πng

export const debugFetch = async (url, options = {}) => {
    console.log(`üîç G·ª≠i y√™u c·∫ßu ƒë·∫øn: ${url}`);
    console.log('üì§ Options:', options);

    try {
        const response = await fetch(url, options);
        console.log(`üì• Status code: ${response.status}`);

        // Ki·ªÉm tra header response
        const headers = {};
        response.headers.forEach((value, key) => {
            headers[key] = value;
        });
        console.log('üìù Headers:', headers);

        // Clone response ƒë·ªÉ c√≥ th·ªÉ ƒë·ªçc body
        const clonedResponse = response.clone();

        try {
            // Th·ª≠ ƒë·ªçc response d∆∞·ªõi d·∫°ng JSON
            const data = await clonedResponse.json();
            console.log('‚úÖ Response JSON:', data);
            return response;
        } catch (jsonError) {
            // N·∫øu kh√¥ng ph·∫£i JSON, ƒë·ªçc d∆∞·ªõi d·∫°ng text
            const text = await response.text();
            console.log('‚ö†Ô∏è Response (kh√¥ng ph·∫£i JSON):', text);

            // T·∫°o response m·ªõi ƒë·ªÉ tr·∫£ v·ªÅ cho ·ª©ng d·ª•ng
            return new Response(text, {
                status: response.status,
                statusText: response.statusText,
                headers: response.headers
            });
        }
    } catch (error) {
        console.error('‚ùå Network error:', error);
        throw error;
    }
};

// C√°ch s·ª≠ d·ª•ng trong Login.js:
/*
import { debugFetch } from './API_DEBUG';

// Thay
const res = await fetch(`${API_BASE_URL}/api/auth/login`, {...});

// B·∫±ng
const res = await debugFetch(`${API_BASE_URL}/api/auth/login`, {...});
*/